// Part of <https://miracle.systems/p/walkner-paltrack> licensed under <CC BY-NC-SA 4.0>

'use strict';

const deepEqual = require('deep-equal');
const validateGoods = require('./util/validateGoods');
const createChangeSchema = require('./util/createChangeSchema');

exports.name = 'Grn';

exports.setUp = (app, mongoose) =>
{
  const grnChangeSchema = createChangeSchema(mongoose);

  const grnSchema = new mongoose.Schema({
    receiver: {
      type: mongoose.Schema.Types.ObjectId,
      ref: 'Partner',
      required: true
    },
    supplier: {
      type: mongoose.Schema.Types.ObjectId,
      ref: 'Partner',
      required: true
    },
    date: {
      type: Date,
      required: true
    },
    docNo: {
      type: String,
      required: true,
      trim: true
    },
    goods: {},
    checked: {
      type: Boolean,
      default: false
    },
    checkedAt: {
      type: Date,
      default: null
    },
    checker: {},
    createdAt: Date,
    creator: {},
    updatedAt: Date,
    updater: {},
    changes: [grnChangeSchema],
    autoNote: {
      type: mongoose.Schema.Types.ObjectId,
      default: null
    }
  }, {
    id: false,
    minimize: false
  });

  grnSchema.statics.TOPIC_PREFIX = 'registry.grn';
  grnSchema.statics.BROWSE_LIMIT = 1000;

  grnSchema.index({date: -1});
  grnSchema.index({receiver: 1, date: -1});
  grnSchema.index({supplier: 1, date: -1});
  grnSchema.index({receiver: 1, docNo: 1});
  grnSchema.index({docNo: 1});

  grnSchema.path('goods').validate(validateGoods, 'goods:required');

  grnSchema.methods.findRelatedGn = function(done)
  {
    const conditions = {
      receiver: this.receiver,
      supplier: this.supplier,
      docNo: this.docNo
    };

    mongoose.model('Gdn').findOne(conditions, done);
  };

  grnSchema.methods.checkGdn = function(done)
  {
    const grn = this;

    grn.findRelatedGn(function(err, gdn)
    {
      if (err)
      {
        return done(err);
      }

      grn.checkedAt = grn.createdAt;
      grn.checker = grn.creator;
      grn.checked = gdn ? deepEqual(grn.goods, gdn.goods) : false;

      return done();
    });
  };

  mongoose.model(exports.name, grnSchema);
};
